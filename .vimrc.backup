set runtimepath^=~/.vim/bundle/ctrlp.vim

" ----------------------------------------------------------------------------
"  Visual cues
" ----------------------------------------------------------------------------
set incsearch               " do incremental searching
"set nohlsearch              " don't highlight searches
set laststatus=2            " always show the status line

"set backupdir=~/.vim/backups           " store backups under ~/.vim/backup
"set backupcopy=yes                     " keep attributes of original file
"set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*
"set directory=~/.vim/tmp               " where to keep swp files

" ---------------------------------------------------------------------------
" Mappings
" ---------------------------------------------------------------------------

" unhighlight searches on hitting enter
" nnoremap <CR> :nohlsearch<cr>

" because what does :W do?
" map :W :w

" setting working path
map <leader>cd :cd %:p:h<CR>

" method navigation
map <leader>j ]m
map <leader>J ]M
map <leader>k [m
map <leader>K [M



" switch between a symbol and a string
nmap <leader>" bbr"ea"<Esc>
nmap <leader>: bhs:<Esc>wwx

" ctags shortcuts
nmap <C-\> <C-]>
nmap g<C-\> g<C-]>

" paste the last thing really yanked rather than deleted.  Useful for
" repeatedly replacing some text with something previously yanked.
vmap <leader>P "0p

" ---------------------------------------------------------------------------
"  rspec shortcuts
" ---------------------------------------------------------------------------
function! RunCucTests()
  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo
  exec ":! rake cucumber"
endfunction

function! RunTests(filename)
  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo
  echo ":! rspec " . a:filename
  exec ":! rspec " . a:filename
endfunction

function! SetTestFile()
  " Set the spec file that tests will be run for.
  let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  "Run the tests for the previously-marked file.
  let in_spec_file = match(expand("%"), '_spec.rb$') != -1
  if in_spec_file
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    return
  end
  call RunTests(t:grb_test_file .  command_suffix)
endfunction

function! RunNearestTest()
  let spec_line_number =  line('.')
  call  RunTestFile(":" .  spec_line_number)
endfunction

" Run this file
map <leader>t :call RunTestFile()<cr>
" Run only the example under the cursor
map <leader>T :call RunNearestTest()<cr>
" Run all test files
map <leader>a :call RunTests('spec')<cr>
" Run all cucumber test files
map <leader>c :call RunCucTests()<cr>

" ---------------------------------------------------------------------------
"  Status line customization
" ---------------------------------------------------------------------------
"set statusline=
"set statusline+=%-3.3n\                      " buffer number
"set statusline+=%f\                          " filename
"set statusline+=%h%m%r%w                     " status flags
"set statusline+=\[%{strlen(&ft)?&ft:'none'}] " file type
""set statusline+=\ %{fugitive#statusline()}   " fugitive
"set statusline+=%=                           " right align remainder
"set statusline+=%-14(%l,%c%V%)               " line, character
"set statusline+=%<%P                         " file position


" ---------------------------------------------------------------------------
"  Command-t customization
" ---------------------------------------------------------------------------
let g:CommandTMaxFiles=20000
let g:CommandTMaxHeight=15


" ---------------------------------------------------------------------------
"  Surround plugin - allow # to be used for string interpolation.
" ---------------------------------------------------------------------------
autocmd FileType ruby let g:surround_113 = "#{\r}"   " v
autocmd FileType ruby let g:surround_35  = "#{\r}"   " #

augroup myfiletypes
  "clear old autocmds in group
  autocmd!

  "for ruby, autoindent with two spaces, always expand tabs
  autocmd FileType ruby,haml,eruby,yaml set ai sw=2 sts=2 et
augroup END

augroup markdown
  autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:>
  set wrap
  set linebreak
  set nolist
  set formatoptions+=1
augroup END

augroup god
  autocmd BufRead *.god set filetype=ruby
augroup END

let g:liquid_highlight_types=["html","erb=eruby","html+erb=eruby.html"]


if $TERM == 'screen'
  set term=xterm
endif


"-------------------------
"   Some extra settings
"-------------------------

" JSON PARSING
" JSONTidy!
function! s:json_tidy()
  execute "%!python -m json.tool"
  endfunction
  command! JSONTidy call s:json_tidy()

" ------------------------
"  Go Stuff

let g:go_fmt_command = "goimports"

set runtimepath^=~/.vim/bundle/ag

" AutoTag
" Seems to have problems with some vim files
let g:autotagExcludeSuffixes="tml.xml.text.txt.vim"

" Automatically jump to a file at the correct line number
" i.e. if you visual highlight over /some/path.rb:50 then using 'gf' on it will take
" you to that line

" use ,gf to go to file in a vertical split
nnoremap <silent> ,gf   :vertical botright wincmd F<CR>

" --------------------
"  CTAGS
" --------------------
set shell=bash\ -i

" ---------------------------------------------------------------------------
"  rails.vim plugin mappings
" ---------------------------------------------------------------------------
nnoremap ,vv :Eview<cr>
nnoremap ,cc :Econtroller<cr>
nmap <leader>r :Rake<CR>
nmap <leader>R :.Rake<CR>

nmap <leader><leader>c :Rcontroller
nmap <leader><leader>m :Rmodel
nmap <leader><leader>v :Rview
nmap <leader><leader>h :Rhelper
nmap <leader><leader>i :Rinitializer
nmap <leader><leader>e :Renvironment
nmap <leader><leader>l :Rlib
nmap <leader><leader>f :Rfeature
nmap <leader><leader>u :Runittest
nmap <leader><leader>j :Rjavascript
nmap <leader><leader>t :Rtask
nmap <leader><leader>r :Rspec

" ---------------------------------------------------------------------------
"  rails.vim autocommands
" ---------------------------------------------------------------------------
autocmd User Rails silent! Rnavcommand feature features                  -glob=* -suffix=.feature
autocmd User Rails silent! Rnavcommand steps   features/step_definitions -glob=* -suffix=_steps.rb

